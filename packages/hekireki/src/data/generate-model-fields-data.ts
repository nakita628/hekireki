import type { Model } from "../generator/mermaid/type";

export const testUserModel: Model = {
	name: "User",
	dbName: null,
	schema: null,
	fields: [
		{
			name: "id",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: true,
			isReadOnly: false,
			hasDefaultValue: true,
			type: "String",
			nativeType: null,
			default: {
				name: "uuid",
				args: [4],
			},
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Unique identifier for the user.\n@z.string().uuid()\n@v.pipe(v.string(), v.uuid())",
		},
		{
			name: "username",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "String",
			nativeType: null,
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Username of the user.\n@z.string().min(3)\n@v.pipe(v.string(), v.minLength(3))",
		},
		{
			name: "email",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "String",
			nativeType: null,
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Email address of the user.\n@z.string().email()\n@v.pipe(v.string(), v.email())",
		},
		{
			name: "password",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "String",
			nativeType: null,
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Password for the user.\n@z.string().min(8).max(100)\n@v.pipe(v.string(), v.minLength(8), v.maxLength(100))",
		},
		{
			name: "createdAt",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "DateTime",
			nativeType: null,
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Timestamp when the user was created.\n@z.date()\n@v.date()",
		},
		{
			name: "updatedAt",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "DateTime",
			nativeType: null,
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Timestamp when the user was last updated.\n@z.date()\n@v.date()",
		},
		{
			name: "posts",
			kind: "object",
			isList: true,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "Post",
			nativeType: null,
			relationName: "PostToUser",
			relationFromFields: [],
			relationToFields: [],
			isGenerated: false,
			isUpdatedAt: false,
		},
		{
			name: "likes",
			kind: "object",
			isList: true,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "Like",
			nativeType: null,
			relationName: "LikeToUser",
			relationFromFields: [],
			relationToFields: [],
			isGenerated: false,
			isUpdatedAt: false,
		},
	],
	primaryKey: null,
	uniqueFields: [],
	uniqueIndexes: [],
	isGenerated: false,
} as Model;

export const testPostModel: Model = {
	name: "Post",
	dbName: null,
	schema: null,
	fields: [
		{
			name: "id",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: true,
			isReadOnly: false,
			hasDefaultValue: true,
			type: "String",
			nativeType: null,
			default: {
				name: "uuid",
				args: [4],
			},
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Unique identifier for the post.\n@z.string().uuid()\n@v.pipe(v.string(), v.uuid())",
		},
		{
			name: "userId",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: true,
			hasDefaultValue: false,
			type: "String",
			nativeType: null,
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"ID of the user who created the post.\n@z.string().uuid()\n@v.pipe(v.string(), v.uuid())",
		},
		{
			name: "content",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "String",
			nativeType: null,
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Content of the post.\nMaximum length: 500 characters.\n@z.string().max(500)\n@v.pipe(v.string(), v.maxLength(500))",
		},
		{
			name: "createdAt",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: true,
			type: "DateTime",
			nativeType: null,
			default: {
				name: "now",
				args: [],
			},
			isGenerated: false,
			isUpdatedAt: false,
			documentation:
				"Timestamp when the post was created.\n@z.date()\n@v.date()",
		},
		{
			name: "updatedAt",
			kind: "scalar",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: true,
			type: "DateTime",
			nativeType: null,
			default: {
				name: "now",
				args: [],
			},
			isGenerated: false,
			isUpdatedAt: true,
			documentation:
				"Timestamp when the post was last updated.\nAutomatically updated on record changes.\n@z.date()\n@v.date()",
		},
		{
			name: "user",
			kind: "object",
			isList: false,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "User",
			nativeType: null,
			relationName: "PostToUser",
			relationFromFields: ["userId"],
			relationToFields: ["id"],
			relationOnDelete: "Cascade",
			isGenerated: false,
			isUpdatedAt: false,
			documentation: "Relation with the User model.",
		},
		{
			name: "likes",
			kind: "object",
			isList: true,
			isRequired: true,
			isUnique: false,
			isId: false,
			isReadOnly: false,
			hasDefaultValue: false,
			type: "Like",
			nativeType: null,
			relationName: "LikeToPost",
			relationFromFields: [],
			relationToFields: [],
			isGenerated: false,
			isUpdatedAt: false,
		},
	],
	primaryKey: null,
	uniqueFields: [],
	uniqueIndexes: [],
	isGenerated: false,
	documentation: "@relation User.id Post.userId one-to-many",
} as Model;
