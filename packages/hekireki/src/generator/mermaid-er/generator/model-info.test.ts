import { describe, expect, it } from 'vitest'
import { modelInfo } from '.'

// Test run
// pnpm vitest run ./src/generator/mermaid-er/generator/model-info.test

describe('modelInfo', () => {
  it.concurrent('modelInfo Test', () => {
    const result = modelInfo({
      name: 'User',
      dbName: null,
      schema: null,
      fields: [
        {
          name: 'id',
          kind: 'scalar',
          isList: false,
          isRequired: true,
          isUnique: false,
          isId: true,
          isReadOnly: false,
          hasDefaultValue: true,
          type: 'String',
          nativeType: null,
          default: {
            name: 'uuid',
            args: [4],
          },
          isGenerated: false,
          isUpdatedAt: false,
          documentation:
            'Unique identifier for the user.\n@z.uuid()\n@v.pipe(v.string(), v.uuid())',
        },
        {
          name: 'username',
          kind: 'scalar',
          isList: false,
          isRequired: true,
          isUnique: false,
          isId: false,
          isReadOnly: false,
          hasDefaultValue: false,
          type: 'String',
          nativeType: null,
          isGenerated: false,
          isUpdatedAt: false,
          documentation:
            'Username of the user.\n@z.string().min(3)\n@v.pipe(v.string(), v.minLength(3))',
        },
        {
          name: 'email',
          kind: 'scalar',
          isList: false,
          isRequired: true,
          isUnique: false,
          isId: false,
          isReadOnly: false,
          hasDefaultValue: false,
          type: 'String',
          nativeType: null,
          isGenerated: false,
          isUpdatedAt: false,
          documentation:
            'Email address of the user.\n@z.string().email()\n@v.pipe(v.string(), v.email())',
        },
        {
          name: 'password',
          kind: 'scalar',
          isList: false,
          isRequired: true,
          isUnique: false,
          isId: false,
          isReadOnly: false,
          hasDefaultValue: false,
          type: 'String',
          nativeType: null,
          isGenerated: false,
          isUpdatedAt: false,
          documentation:
            'Password for the user.\n@z.string().min(8).max(100)\n@v.pipe(v.string(), v.minLength(8), v.maxLength(100))',
        },
        {
          name: 'createdAt',
          kind: 'scalar',
          isList: false,
          isRequired: true,
          isUnique: false,
          isId: false,
          isReadOnly: false,
          hasDefaultValue: false,
          type: 'DateTime',
          nativeType: null,
          isGenerated: false,
          isUpdatedAt: false,
          documentation: 'Timestamp when the user was created.\n@z.date()\n@v.date()',
        },
        {
          name: 'updatedAt',
          kind: 'scalar',
          isList: false,
          isRequired: true,
          isUnique: false,
          isId: false,
          isReadOnly: false,
          hasDefaultValue: false,
          type: 'DateTime',
          nativeType: null,
          isGenerated: false,
          isUpdatedAt: false,
          documentation: 'Timestamp when the user was last updated.\n@z.date()\n@v.date()',
        },
        {
          name: 'posts',
          kind: 'object',
          isList: true,
          isRequired: true,
          isUnique: false,
          isId: false,
          isReadOnly: false,
          hasDefaultValue: false,
          type: 'Post',
          nativeType: null,
          relationName: 'PostToUser',
          relationFromFields: [],
          relationToFields: [],
          isGenerated: false,
          isUpdatedAt: false,
        },
        {
          name: 'likes',
          kind: 'object',
          isList: true,
          isRequired: true,
          isUnique: false,
          isId: false,
          isReadOnly: false,
          hasDefaultValue: false,
          type: 'Like',
          nativeType: null,
          relationName: 'LikeToUser',
          relationFromFields: [],
          relationToFields: [],
          isGenerated: false,
          isUpdatedAt: false,
        },
      ],
      primaryKey: null,
      uniqueFields: [],
      uniqueIndexes: [],
      isGenerated: false,
    })

    const expected = [
      '    User {',
      '        String id "Unique identifier for the user."',
      '        String username "Username of the user."',
      '        String email "Email address of the user."',
      '        String password "Password for the user."',
      '        DateTime createdAt "Timestamp when the user was created."',
      '        DateTime updatedAt "Timestamp when the user was last updated."',
      '    }',
    ]
    expect(result).toStrictEqual(expected)
  })
})
